[{"E:\\windows\\Jason\\Documents\\GitHub\\oeis-sequence-guesser\\app\\src\\reportWebVitals.js":"1","E:\\windows\\Jason\\Documents\\GitHub\\oeis-sequence-guesser\\app\\src\\App.js":"2"},{"size":362,"mtime":1607711154154,"results":"3","hashOfConfig":"4"},{"size":2937,"mtime":1609553517395,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rhg6h1",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"E:\\windows\\Jason\\Documents\\GitHub\\oeis-sequence-guesser\\app\\src\\reportWebVitals.js",[],"E:\\windows\\Jason\\Documents\\GitHub\\oeis-sequence-guesser\\app\\src\\App.js",["11"],"import logo from './logo.svg';\nimport './App.css';\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const { sequences, loading } = useSequences();\n  const loadingMessage = <p>Downloading OEIS Sequences...</p>;\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {loading ? loadingMessage : <Game sequences={sequences} />}\n      </header>\n    </div>\n  );\n}\n\nfunction Game({ sequences }) {\n  const randomSequences = useRandomChoose(sequences);\n  const { choices: options, indices } = randomSequences;\n  const aNumbers = options.map(o => o[0].trim());\n  const correctIndex = useRandomChoose(indices, 1).choices[0];\n  const sequence = sequences[correctIndex].slice(1);\n  const sequenceHint = sequence.slice(0, 5);\n  const { sequenceNames, loading } = useSequenceNames(aNumbers);\n  if (loading) {\n    return <p>Downloading sequence names...</p>;\n  }\n\n  return (\n    <>\n      <p>Sequence starts with: <strong>{sequenceHint.join(' ')}</strong></p>\n      <ol>\n        {aNumbers.map(a => <li>{sequenceNames[a]}</li>)}\n      </ol>\n    </>\n  );\n}\n\nfunction useSequences() {\n  const [sequences, setSequences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    Papa.parse('/sequences.csv', {\n      download: true,\n      comments: true,\n      chunk(results) {\n        setSequences(s => s.concat(results.data));\n      },\n      complete() {\n        setLoading(false);\n      }\n    });\n  }, []);\n  return { sequences, loading };\n}\n\nfunction useSequenceNames(aNumbers) {\n  const [sequenceNames, setSequenceNames] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  console.log(aNumbers);\n\n  useEffect(() => Papa.parse('/sequence-names.csv', {\n    delimiter: ' ',\n    download: true,\n    comments: true,\n    chunk(results) {\n      setSequenceNames(s => {\n        const copy = {...s};\n        for (let row of results.data) {\n          if (aNumbers.includes(row[0]))\n            copy[row[0]] = row.slice(1).join(' ');\n        }\n        return copy;\n      });\n    },\n    complete() {\n      setSequenceNames(s => {\n        const copy = {...s};\n        for (let aNumber in copy) {\n          copy[aNumber] = copy[aNumber].replace(/(A\\d{6})/, m => `\"${copy[m[1]]}\"`);\n        }\n        setLoading(false);\n        return copy;\n      });\n    }\n  }), [aNumbers]);\n\n  return { sequenceNames, loading };\n}\n\nfunction useRandomChoose(array, count = 4) {\n  const [choices, setChoices] = useState(null);\n  if (choices === null) {\n    const c = randomChoose(array, count);\n    setChoices(c);\n    return c;\n  }\n  return choices;\n}\n\nfunction randomChoose(array, count = 4) {\n  const indices = [];\n  while (indices.length < count) {\n    const index = Math.floor(Math.random() * array.length);\n    if (!indices.includes(index)) {\n      indices.push(index);\n    }\n  }\n  return { choices: indices.map(i => array[i]), indices };\n}\n\nexport default App;\n",{"ruleId":"12","severity":1,"message":"13","line":1,"column":8,"nodeType":"14","messageId":"15","endLine":1,"endColumn":12},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar"]